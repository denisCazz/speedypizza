---
import Layout from '../layout/layout.astro';
// Modifica l'importazione: 'menuData' ora si riferisce direttamente all'oggetto JSON.
import * as menuData from '../../menu.json'; 

const nonVegetarianIngredients = [
  "prosciutto", "acciughe", "wurstel", "salamino piccante", "tonno", 
  "salsiccia", "prosciutto crudo", "frutti di mare", "speck", "bresaola", 
  "pancetta", "gamberetti", "'nduja", "porchetta"
];

const spicyIngredients = ["salamino piccante", "peperoncino", "'nduja"];

const pizzas = menuData.pizze.map(pizza => {
  const lowerCaseIngredients = pizza.ingredienti.map(ing => ing.toLowerCase());
  return {
    name: pizza.nome,
    ingredients: pizza.ingredienti.join(', '),
    price: `‚Ç¨ ${pizza.prezzo.toFixed(2)}`,
    isVegetarian: !lowerCaseIngredients.some(ing => nonVegetarianIngredients.includes(ing)),
    isSpicy: lowerCaseIngredients.some(ing => spicyIngredients.includes(ing))
  };
});

const extraInfo = menuData.extra;

// Prepara i dati per lo script client-side
const clientSidePizzas = pizzas.map(p => ({
  name: p.name,
  ingredients: p.ingredients
}));
---

<Layout title="Il Nostro Menu d'Asporto - Speedy Pizza">
  <section class="menu-page section-padding">
    <div class="container">
      <h1 class="text-center">Il Nostro Menu d'Asporto</h1>
      <p class="text-center menu-intro">
        Scopri la nostra selezione di pizze, preparate con ingredienti freschi e amore, pronte da portare via.
        <br />
        Siamo a {menuData.indirizzo}. Per ordini: <a href={`tel:${menuData.telefono.replace(/-/g, '')}`}>{menuData.telefono}</a>
        <br />
        <span class="icon-legend">üåø Vegetariana</span> | <span class="icon-legend">üå∂Ô∏è Piccante</span>
      </p>

      <div class="search-container">
        <input type="text" id="search-bar" placeholder="Cerca per nome o ingrediente..." aria-label="Cerca pizze">
      </div>
      
      <div class="menu-grid">
        {pizzas.map(pizza => (
          <div class="menu-item">
            <h3>
              {pizza.name}
              {pizza.isVegetarian && <span class="icon" title="Vegetariana">üåø</span>}
              {pizza.isSpicy && <span class="icon" title="Piccante">üå∂Ô∏è</span>}
            </h3>
            <p class="ingredients">{pizza.ingredients}</p>
            <p class="price">{pizza.price}</p>
          </div>
        ))}
      </div>

      <div class="menu-info text-center">
        <p>Aggiunta ingredienti: ‚Ç¨ {extraInfo.aggiunta_ingredienti.toFixed(2)}</p>
        <p>Aggiunta Burrata: ‚Ç¨ {extraInfo.aggiunta_burrata.toFixed(2)}</p>
        <p>Aggiunta Mozzarella di Bufala: ‚Ç¨ {extraInfo.aggiunta_bufala.toFixed(2)}</p>
        <p>Sconto Pizza Baby: -‚Ç¨ {extraInfo.pizza_baby_sconto.toFixed(2)}</p>
        <p>Tutte le nostre pizze sono disponibili anche con impasto integrale (supplemento da verificare al momento dell'ordine).</p>
        <p>Per allergeni o richieste particolari, non esitare a chiedere al nostro staff al momento dell'ordine!</p>
      </div>
    </div>
  </section>
</Layout>

<script define:vars={{ clientSidePizzas }}>
  const searchBar = document.getElementById('search-bar');
  const menuItemsNodeList = document.querySelectorAll('.menu-item');
  // Converti NodeList in Array per usare metodi come forEach in browser pi√π vecchi (sebbene querySelectorAll.forEach sia ampiamente supportato)
  const menuItems = Array.from(menuItemsNodeList);

  searchBar.addEventListener('input', (event) => {
    const searchTerm = event.target.value.toLowerCase().trim();

    menuItems.forEach((itemElement, index) => {
      const pizzaData = clientSidePizzas[index];
      
      if (!pizzaData) { // Salvaguardia nel caso gli array non siano allineati
        itemElement.style.display = 'none'; // Nascondi se non ci sono dati corrispondenti
        return;
      }

      const nameMatches = pizzaData.name.toLowerCase().includes(searchTerm);
      const ingredientsMatch = pizzaData.ingredients.toLowerCase().includes(searchTerm);

      if (nameMatches || ingredientsMatch) {
        itemElement.style.display = ''; // Mostra (ripristina display predefinito)
      } else {
        itemElement.style.display = 'none'; // Nascondi
      }
    });
  });
</script>

<style>
  .menu-intro {
    font-size: 1.1rem;
    margin-bottom: 1.5rem; /* Adjusted margin */
    color: var(--dark-gray);
  }

  .icon-legend {
    font-size: 0.9rem;
    color: #555;
  }
  
  .menu-grid {
    display: grid;
    grid-template-columns: 1fr; /* Mobile first: 1 column */
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .menu-item {
    background-color: #fff;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }

  .menu-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 20px rgba(0,0,0,0.12);
  }

  .menu-item h3 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
    font-size: 1.4rem;
    display: flex; /* To align icons nicely */
    align-items: center;
  }

  .menu-item h3 .icon {
    margin-left: 0.5rem;
    font-size: 1rem; /* Adjust icon size as needed */
    display: inline-block;
  }

  .menu-item .ingredients {
    font-size: 0.9rem;
    color: #555;
    margin-bottom: 0.75rem;
    min-height: 40px; /* Ensure consistent height for ingredient list */
  }

  .menu-item .price {
    font-size: 1.1rem;
    font-weight: bold;
    color: var(--dark-gray);
    margin-bottom: 0;
  }

  .menu-info {
    margin-top: 2rem;
    padding: 1.5rem;
    background-color: var(--light-gray);
    border-radius: 8px;
  }

  .menu-info p {
    margin-bottom: 0.5rem;
    font-size: 0.95rem;
  }

  .search-container {
    margin-bottom: 2rem;
    display: flex;
    justify-content: center;
  }

  #search-bar {
    width: 100%;
    max-width: 500px; /* Limita la larghezza su schermi grandi */
    padding: 0.75rem 1rem;
    font-size: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px; /* Angoli arrotondati */
    box-shadow: 0 2px 5px rgba(0,0,0,0.05); /* Ombra leggera */
  }

  #search-bar:focus {
    outline: none; /* Rimuovi outline predefinito */
    border-color: var(--primary-color); /* Colore del bordo al focus */
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Ombra al focus, usa un colore primario se definito o un fallback */
    /* Se var(--primary-color-rgb) √® definito, potresti usarlo:
    box-shadow: 0 0 0 0.2rem rgba(var(--primary-color-rgb), 0.25); 
    */
  }

  /* Tablet and larger */
  @media (min-width: 768px) {
    .menu-grid {
      grid-template-columns: repeat(2, 1fr); /* 2 columns */
    }
  }

  /* Desktop */
  @media (min-width: 1024px) {
    .menu-grid {
      grid-template-columns: repeat(3, 1fr); /* 3 columns */
    }
  }
</style>
